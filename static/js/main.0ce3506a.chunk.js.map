{"version":3,"sources":["theme.ts","vComponents/TitledCounter.tsx","useGlobalStatistics.ts","State/globalStatistics.ts","colors.ts","Components/Global.tsx","useCountriesStatistics.ts","State/countriesStatistics.ts","Components/CountriesStatistics.tsx","useCountryTimeline.ts","State/countryTimeline.ts","Components/CountryData.tsx","App.tsx","serviceWorker.ts","State/store.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","lightGreen","secondary","pink","spacing","factor","responsiveFontSizes","useStyles","makeStyles","root","color","fontFamily","block","display","TitledCounter","value","title","classes","className","containerClass","Grid","container","direction","alignItems","justify","classnames","item","xs","Typography","align","component","variant","toLocaleString","replace","label","useGlobalStatistics","dispatch","useDispatch","useEffect","type","request","url","meta","cache","useSelector","getQuerySelector","data","loading","error","pristine","simplifiedData","useRef","current","useMemo","results","deathsToday","total_new_deaths_today","casesToday","total_new_cases_today","seriousCases","total_serious_cases","unresolved","total_unresolved","recovered","total_recovered","deaths","total_deaths","activeCases","total_active_cases","cases","total_cases","affectedCountries","total_affected_countries","colors","fontWeight","Global","isThereActualData","Fade","in","Container","maxWidth","sm","useCountriesStatistics","countryCode","countries","countryitems","tempData","Object","values","forEach","newCasesToday","newDeathsToday","code","id","ourid","table","height","red","backgroundColor","yellow","green","EnhancedTableHead","props","headCellsLabels","order","orderBy","onRequestSort","TableHead","TableRow","map","headCellData","TableCell","numeric","key","sortDirection","TableSortLabel","active","onClick","descendingComparator","a","b","CountriesStatistics","divContainerClassName","countriesStatistics","globalStatistics","columns","React","useState","setOrder","setOrderBy","Paper","Toolbar","TableContainer","Table","stickyHeader","property","TableBody","selected","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","country","hover","Link","to","undefined","useCountryTimeline","fetchCountryTimeline","countrytimelinedata","info","timelineItems","timelineitems","timeline","entries","date","new_daily_cases","new_daily_deaths","recoveries","total_recoveries","countryInfo","formatZeroesToKorM","PreconfiguredTitledGraph","Box","marginLeft","marginTop","options","tooltips","mode","intersect","scales","xAxes","gridLines","scaleLabel","stacked","ticks","maxTicksLimit","yAxes","min","stepSize","callback","CountryData","useParams","countryTimeline","countryStatistics","totalCases","totalDeaths","totalRecovered","separatedEntries","tempObj","dates","totalCasesPerDay","newCasesPerDay","totalDeathsPerDay","newDeathsPerDay","totalRecoveriesPerDay","datasets","hoverBackgroundColor","labels","main","overflowX","App","mainClassname","ThemeProvider","CssBaseline","path","exact","Boolean","window","location","hostname","match","onSuccess","response","RequestAction","URL","host","strippedStr","console","warn","JSON","parse","configureStore","handleRequests","driver","createDriver","axios","requestsReducer","requestsMiddleware","reducers","combineReducers","requests","createStore","applyMiddleware","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0ce3506a.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core';\r\nimport { pink, lightGreen } from '@material-ui/core/colors';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: lightGreen,\r\n    secondary: pink,\r\n  },\r\n  spacing: factor => `${0.25 * factor}rem`,\r\n});\r\n\r\n\r\nexport default responsiveFontSizes(theme);","import React from 'react';\r\nimport { Grid, Theme, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport classnames from 'classnames';\r\n\r\n\r\n\r\ninterface TitledCounterProps {\r\n  value: number;\r\n  title: string;\r\n  classes?: Record<'value' | 'label' | 'container', string>; // used to extend the given underlying component's className\r\n  className?: string; // used to overwrite the container className.\r\n  color?: string; // set color of the component\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, {color: string | undefined}>({\r\n  root: ({ color }) => ({\r\n    color,\r\n    '& *': {\r\n      fontFamily: 'Noto Sans, Roboto'\r\n    },\r\n  }),\r\n  block: {\r\n    display: 'block'\r\n  }\r\n});\r\n\r\n\r\n// allow MUI to set this component's styles via TitledCounterProps.style\r\nconst TitledCounter: React.FC<TitledCounterProps> = ({ value, title, color = 'inherit', classes, className  }) => {\r\n  const { root: containerClass  } = useStyles({ color });\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction='row'\r\n      alignItems='center'\r\n      justify='center'\r\n      spacing={0}\r\n      className={\r\n        classnames(\r\n          [\r\n            { // if className isn't defined use default classes\r\n              [containerClass]: !className\r\n            },\r\n            className,\r\n            classes?.container\r\n          ]\r\n        )\r\n      }\r\n    >\r\n      <Grid item xs={12}>\r\n        <Typography className={classes?.value} align=\"center\" component=\"div\" variant=\"h2\">\r\n          {\r\n            value\r\n              .toLocaleString('en-US')\r\n              .replace(/,/g, ' ')\r\n          }\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Typography className={classes?.label} align=\"center\" component=\"h2\" variant=\"h2\">\r\n          {title}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default TitledCounter;\r\n\r\n","import { useEffect, useMemo, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getQuerySelector, QueryState } from '@redux-requests/core';\r\nimport { fetchGlobalStatistics, FETCH_GLOBAL_STATISTICS } from './State/globalStatistics';\r\n\r\n\r\nconst useGlobalStatistics = (): QueryState<GlobalStatistics | null> => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchGlobalStatistics());\r\n  }, [dispatch]);\r\n\r\n  const { data, loading, error, pristine } = useSelector(\r\n    getQuerySelector<Response>({\r\n      type: FETCH_GLOBAL_STATISTICS\r\n    })\r\n  );\r\n\r\n  // Check whether the data has arrived. If it has simplify it. Otherwise just let it be null.\r\n  const simplifiedData = useRef<GlobalStatistics | null>(null);\r\n  simplifiedData.current = useMemo(() => {\r\n    if (data) {\r\n      const { results: [{\r\n        total_new_deaths_today: deathsToday,\r\n        total_new_cases_today: casesToday,\r\n        total_serious_cases: seriousCases,\r\n        total_unresolved: unresolved,\r\n        total_recovered: recovered,\r\n        total_deaths: deaths,\r\n        total_active_cases: activeCases,\r\n        total_cases: cases,\r\n        total_affected_countries: affectedCountries\r\n      }] } = data;\r\n      return {\r\n        activeCases,\r\n        cases,\r\n        deaths,\r\n        recovered,\r\n        seriousCases,\r\n        unresolved,\r\n        casesToday,\r\n        deathsToday,\r\n        affectedCountries\r\n      };\r\n    }\r\n    return null;\r\n  }, [data]);\r\n\r\n  return {\r\n    data: simplifiedData.current,\r\n    loading,\r\n    error,\r\n    pristine\r\n  };\r\n};\r\n\r\ninterface GlobalStatistics {\r\n  activeCases: number\r\n  cases: number\r\n  deaths: number\r\n  recovered: number\r\n  seriousCases: number\r\n  unresolved: number\r\n  casesToday: number\r\n  deathsToday: number\r\n  affectedCountries: number\r\n}\r\n\r\ntype Response = \r\n    {\r\n      results: [{\r\n        total_active_cases: number\r\n        total_affected_countries: number\r\n        total_cases: number\r\n        total_deaths: number\r\n        total_new_cases_today: number\r\n        total_new_deaths_today: number\r\n        total_recovered: number\r\n        total_serious_cases: number\r\n        total_unresolved: number\r\n      }]\r\n    };\r\n\r\nexport default useGlobalStatistics;","import { RequestAction } from '@redux-requests/core';\r\n\r\nexport const FETCH_GLOBAL_STATISTICS = 'FETCH_GLOBAL_STATISTICS';\r\n\r\nexport const fetchGlobalStatistics = (): RequestAction => ({\r\n  type: FETCH_GLOBAL_STATISTICS,\r\n  request: {\r\n    url: 'https://api.thevirustracker.com/free-api?global=stats'\r\n  }\r\n  ,\r\n  meta: {\r\n    cache: 120 // Cache for two minutes\r\n  }\r\n});","export const colors = {\r\n  'Deaths':       '#F72C25',\r\n  'Cases':        '#FDCD49',\r\n  'SeriousCases': '#260986',\r\n  'Recovered':    '#33C173'\r\n};\r\n\r\n","import React from 'react';\r\nimport { Grid, Fade, Container, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TitledCounter from '../vComponents/TitledCounter';\r\nimport useGlobalStatistics from '../useGlobalStatistics';\r\nimport { colors } from '../colors';\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    fontWeight: 700,\r\n  }\r\n});\r\n\r\n\r\nconst Global: React.FC = () => {\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  // TODO do something when an error occurs. 'error' is left intentionally.\r\n  const { data, loading, error } = useGlobalStatistics();\r\n\r\n  const isThereActualData = (!loading && !!data);\r\n  const {\r\n    cases,\r\n    deaths,\r\n    recovered,\r\n    seriousCases\r\n  } = data ?? {};\r\n\r\n  return (\r\n    <Fade in={isThereActualData}>\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container spacing={10}>\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.title} align='center' variant=\"h1\">\r\n              Global Statistics:\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TitledCounter color={colors.Cases} value={cases || 0} title=\"Cases\" />\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <TitledCounter color={colors.Recovered} value={recovered || 0} title=\"Recovered\" />\r\n          </Grid>\r\n          <Grid item sm={6} xs={12}>\r\n            <TitledCounter color={colors.SeriousCases} value={seriousCases || 0} title=\"Serious Cases\" />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TitledCounter color={colors.Deaths} value={deaths || 0} title=\"Deaths\" />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Fade>\r\n  );\r\n};\r\n\r\n\r\nexport default Global;\r\n\r\n","import { useEffect, useMemo, useRef } from 'react';\r\nimport { getQuerySelector, QueryState } from '@redux-requests/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FETCH_COUNTRIES_STATISTICS, fetchCountriesStatistics } from './State/countriesStatistics';\r\n\r\nfunction useCountriesStatistics(\r\n  countryCode: string\r\n): QueryState<CountryStatisticsT | null>;\r\nfunction useCountriesStatistics(): QueryState<CountriesStatisticsT | null>; \r\nfunction useCountriesStatistics(countryCode?: string)  {\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCountriesStatistics());\r\n  }, [dispatch]);\r\n\r\n  const { data, loading, error, pristine } = useSelector(\r\n    getQuerySelector<Response>({\r\n      type: FETCH_COUNTRIES_STATISTICS,\r\n    }),\r\n  );\r\n\r\n\r\n  const simplifiedData = useRef<CountriesStatisticsT | null>(null);\r\n\r\n  simplifiedData.current = useMemo((): CountriesStatisticsT | null => {\r\n\r\n    if (data) {\r\n\r\n      const { countryitems: [countries] } = data;\r\n\r\n      const tempData: CountriesStatisticsT = {};\r\n\r\n      Object.values(countries)\r\n        .forEach(({\r\n          total_cases:            cases,\r\n          total_active_cases:     activeCases,\r\n          total_new_cases_today:  newCasesToday,\r\n          total_new_deaths_today: newDeathsToday,\r\n          total_unresolved:       unresolved,\r\n          total_serious_cases:    seriousCases,\r\n          total_recovered:        recovered,\r\n          total_deaths:           deaths,\r\n          code,\r\n          title,\r\n          ourid:                  id,\r\n        }) => {\r\n          // filter out values that aren't a country statistics object and also filter out countries with no cases at all\r\n          if (cases > 0)\r\n            tempData[code] = {\r\n              id,\r\n              title,\r\n              deaths,\r\n              cases,\r\n              code,\r\n              unresolved,\r\n              seriousCases,\r\n              recovered,\r\n              newDeathsToday,\r\n              newCasesToday,\r\n              activeCases,\r\n            };\r\n        });\r\n\r\n      return tempData;\r\n\r\n    }\r\n\r\n    return null;\r\n  }, [data]);\r\n\r\n  if (countryCode)\r\n    return {\r\n      data: simplifiedData.current?.[countryCode] || null,\r\n      error,\r\n      loading,\r\n      pristine,\r\n    };\r\n\r\n\r\n  return {\r\n    data: simplifiedData.current,\r\n    error,\r\n    loading,\r\n    pristine,\r\n  };\r\n}\r\n\r\n\r\nexport type CountriesStatisticsT = {\r\n  [code: string]: CountryStatisticsT\r\n};\r\n\r\nexport interface CountryStatisticsT {\r\n  id: number,\r\n  title: string\r\n  code: string\r\n  cases: number\r\n  activeCases: number\r\n  deaths: number\r\n  recovered: number\r\n  unresolved: number\r\n  seriousCases: number\r\n  newCasesToday: number\r\n  newDeathsToday: number\r\n}\r\n\r\ntype Response = {\r\n  countryitems: [{\r\n    [index: number]: {\r\n      ourid: number\r\n      code: string\r\n      title: string\r\n      total_active_cases: number\r\n      total_cases: number\r\n      total_deaths: number\r\n      total_new_cases_today: number\r\n      total_new_deaths_today: number\r\n      total_recovered: number\r\n      total_serious_cases: number\r\n      total_unresolved: number\r\n    }\r\n  }]\r\n};\r\n\r\nexport default useCountriesStatistics;","import { RequestAction } from '@redux-requests/core';\r\n\r\nexport const FETCH_COUNTRIES_STATISTICS = 'FETCH_COUNTRIES_STATISTICS';\r\n\r\nexport const fetchCountriesStatistics = (): RequestAction => ({\r\n  type: FETCH_COUNTRIES_STATISTICS,\r\n  request: {\r\n    url: 'https://api.thevirustracker.com/free-api?countryTotals=ALL'\r\n  }\r\n  ,\r\n  meta: {\r\n    cache: 120, // Cache for two minutes\r\n  }\r\n});\r\n\r\n\r\n","import React, { useMemo } from 'react';\r\nimport {\r\n  Link as MuiLink,\r\n  Fade,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel, Theme,\r\n  Toolbar, Typography, TableContainer, Container,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\nimport useCountriesStatistics, { CountriesStatisticsT } from '../useCountriesStatistics';\r\nimport { colors } from '../colors';\r\nimport useGlobalStatistics from '../useGlobalStatistics';\r\n\r\n\r\n/*\r\n* Most of this code was shamelessly stolen from Material-UI docs.\r\n* Exactly where it was stolen from - Enhanced table.\r\n*\r\n* I am a thief, but a fair one.\r\n* */\r\n\r\ninterface Column {\r\n  key: keyof CountriesStatisticsT[number];\r\n  label: string;\r\n  numeric: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme>({\r\n  table: {\r\n    height: '100vh'\r\n  },\r\n  red: {\r\n    // backgroundColor: '#F72C25',\r\n    backgroundColor: colors.Deaths\r\n  },\r\n  yellow: {\r\n    // backgroundColor: '#FFEB3B',\r\n    backgroundColor: colors.Cases\r\n  },\r\n  green: {\r\n    backgroundColor: colors.Recovered\r\n  },\r\n});\r\n\r\ninterface CountriesStatisticsProps {\r\n  className?: string\r\n}\r\n\r\nconst CountriesStatistics: React.FC<CountriesStatisticsProps> = (\r\n  {\r\n    className: divContainerClassName\r\n  }\r\n) => {\r\n  const countriesStatistics = useCountriesStatistics();\r\n  const globalStatistics = useGlobalStatistics();\r\n  const classes = useStyles();\r\n  const columns: Column[] = [\r\n    { key: 'title', label: 'Title', numeric: false },\r\n    { key: 'cases', label: 'Total Cases', numeric: true },\r\n    { key: 'newCasesToday', label: 'New Cases Today', numeric: true },\r\n    { key: 'deaths', label: 'Total Deaths', numeric: true },\r\n    { key: 'newDeathsToday', label: 'New Deaths Today', numeric: true },\r\n    { key: 'recovered', label: 'Total Recovered', numeric: true },\r\n    { key: 'activeCases', label: 'Active Cases', numeric: true },\r\n    { key: 'seriousCases', label: 'Serious Cases', numeric: true },\r\n  ];\r\n  const [order, setOrder] = React.useState<'asc' | 'desc'>('asc');\r\n  const [orderBy, setOrderBy] = React.useState<string>(\r\n    columns[0].key,\r\n  );\r\n  const handleRequestSort = (property: string,\r\n  ) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n  const loading = countriesStatistics.loading && globalStatistics.loading;\r\n  const countryPath = '/country/';\r\n\r\n\r\n  return (\r\n    <Fade in={!loading && !!countriesStatistics.data}>\r\n      <Container className={divContainerClassName}>\r\n        <Paper>\r\n          <Toolbar>\r\n            <Typography variant='h4'>\r\n              Affected Countries' Statistics\r\n            </Typography>\r\n          </Toolbar>\r\n          <TableContainer className={classes.table}>\r\n            <Table stickyHeader>\r\n              <EnhancedTableHead\r\n                headCellsLabels={columns}\r\n                order={order}\r\n                orderBy={orderBy}\r\n                onRequestSort={handleRequestSort}\r\n              />\r\n              <TableBody>\r\n                <TableRow selected />\r\n                {\r\n                  // added useMemo for optimisation since sorting this many items can take a bit of time.\r\n                  useMemo(() =>\r\n                    stableSort(\r\n                      // if countriesStatistics.data hasn't arrived yet - leave table empty. It won't be visible during load time so it doesn't matter.\r\n                      Object.values(countriesStatistics.data ?? {}),\r\n                      getComparator(order, orderBy)\r\n                    )\r\n                      .map((country) =>\r\n\r\n                        <TableRow\r\n                          hover\r\n                          key={country.id}\r\n                        >\r\n                          <TableCell align='left'>\r\n                            <MuiLink component={Link} to={`${countryPath}${country.code}`} color=\"secondary\">\r\n                              {country.title}\r\n                            </MuiLink>\r\n                          </TableCell>\r\n\r\n                          <TableCell align='right'>\r\n                            {country.cases}\r\n                          </TableCell>\r\n\r\n                          <TableCell align='right' className={country.newCasesToday > 0 ? classes.yellow : undefined}>\r\n                            {country.newCasesToday}\r\n                          </TableCell>\r\n\r\n                          <TableCell align='right'>\r\n                            {country.deaths}\r\n                          </TableCell>\r\n\r\n                          <TableCell align='right' className={country.newDeathsToday > 0 ? classes.red : undefined}>\r\n                            {country.newDeathsToday}\r\n                          </TableCell>\r\n\r\n                          <TableCell align='right' className={country.recovered > 0 ? classes.green : undefined}>\r\n                            {country.recovered}\r\n                          </TableCell>\r\n\r\n                          <TableCell align='right'>\r\n                            {country.activeCases}\r\n                          </TableCell>\r\n\r\n                          <TableCell align='right'>\r\n                            {country.seriousCases}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ), \r\n                  // eslint wants me to to put the colors object's properties as deps. They're meant to be\r\n                  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n                  [order, orderBy, countriesStatistics.data])\r\n                }\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      </Container>\r\n    </Fade>\r\n  );\r\n\r\n};\r\n\r\n\r\ninterface TableHeadProps {\r\n  headCellsLabels: Column[]\r\n  order: 'asc' | 'desc'\r\n  orderBy: string\r\n  onRequestSort: (id: string) => void\r\n}\r\n\r\n\r\nfunction EnhancedTableHead(props: TableHeadProps) {\r\n  const { headCellsLabels, order, orderBy, onRequestSort } = props;\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCellsLabels.map((headCellData) => (\r\n          <TableCell\r\n            align={headCellData.numeric ? 'right' : 'left'}\r\n            key={headCellData.key}\r\n            sortDirection={orderBy === headCellData.key ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCellData.key}\r\n              direction={orderBy === headCellData.key ? order : 'asc'}\r\n              onClick={() => onRequestSort(headCellData.key)}\r\n            >\r\n              {headCellData.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\n\r\nfunction descendingComparator<T extends object>(a: T, b: T, orderBy: keyof T) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator<T extends object>(\r\n  order: 'asc' | 'desc',\r\n  orderBy: keyof T,\r\n) {\r\n  return order === 'desc'\r\n    ? (a: T, b: T) => descendingComparator(a, b, orderBy)\r\n    : (a: T, b: T) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n\r\nfunction stableSort<T extends object>(\r\n  array: T[],\r\n  comparator: ReturnType<typeof getComparator>,\r\n) {\r\n  const stabilizedThis = array.map((el, index) => ({ el, index }));\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a.el, b.el);\r\n    if (order !== 0) return order;\r\n    return a.index - b.index;\r\n  });\r\n  return stabilizedThis.map((el) => el.el);\r\n}\r\n\r\nexport default CountriesStatistics;\r\n","import { useEffect, useMemo, useRef } from 'react';\r\nimport { getQuerySelector } from '@redux-requests/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchCountryTimeline, FETCH_COUNTRY_TIMELINE } from './State/countryTimeline';\r\n\r\n\r\nconst useCountryTimeline = (countryCode: string) => {\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  // Dispatch FETCH_COUNTRY_TIMELINE action so redux-requests catches it.\r\n  useEffect( () => {\r\n    dispatch(fetchCountryTimeline(countryCode));\r\n  },\r\n  [dispatch, countryCode]);\r\n\r\n  // get the fetching data and status from redux-requests\r\n  const { data, loading, error, pristine } = useSelector(\r\n    getQuerySelector<Response>({\r\n      type: FETCH_COUNTRY_TIMELINE\r\n    })\r\n  );\r\n  // if there is data, map it into a simpler object otherwise let it be null\r\n  const simplifiedData = useRef<CountryAndTimeline | null>(null);\r\n  simplifiedData.current = useMemo(() => {\r\n    if (data) {\r\n\r\n      const {\r\n        countrytimelinedata: [{\r\n          info: {\r\n            code,\r\n            title\r\n          }\r\n        }],\r\n        timelineitems: [timelineItems]\r\n      } = data;\r\n\r\n      // create an empty timeline object then fill it up with the API response's data.\r\n      const timeline: Timeline = {};\r\n      Object.entries(timelineItems).forEach( (\r\n        [\r\n          date,\r\n          {\r\n            total_cases: cases,\r\n            total_deaths: deaths,\r\n            new_daily_cases: casesToday,\r\n            new_daily_deaths: deathsToday,\r\n            total_recoveries: recoveries,\r\n          }\r\n        ]\r\n      ) => {\r\n        // if this particular country has > 0 cases return it.\r\n        if (cases)\r\n          timeline[date] = {\r\n            deathsToday,\r\n            cases,\r\n            casesToday,\r\n            deaths,\r\n            recoveries\r\n          };\r\n      });\r\n\r\n      // set the simplified data to a CountryAndTimeline\r\n      return {\r\n        timeline,\r\n        countryInfo: {\r\n          code,\r\n          title\r\n        }\r\n      };\r\n    }\r\n    return null;\r\n  }, [data]);\r\n  \r\n  \r\n  return { data: simplifiedData.current, loading, pristine, error };\r\n};\r\n\r\ninterface CountryAndTimeline {\r\n  countryInfo: {\r\n    code: string,\r\n    title: string\r\n  },\r\n  timeline: Timeline\r\n} \r\n\r\ninterface Timeline {\r\n  [date: string]: TimelineEntry\r\n}\r\n\r\ninterface TimelineEntry {\r\n  casesToday: number\r\n  deathsToday: number\r\n  cases: number\r\n  deaths: number\r\n  recoveries: number\r\n}\r\n\r\ninterface Response {\r\n  countrytimelinedata: [{\r\n    info: {\r\n      code: string,\r\n      title: string\r\n    }\r\n  }];\r\n\r\n  timelineitems: [{\r\n    [date: string]: {\r\n      new_daily_cases: number\r\n      new_daily_deaths: number\r\n      total_cases: number\r\n      total_deaths: number\r\n      total_recoveries: number\r\n    }\r\n  }];\r\n}\r\n\r\n\r\nexport default useCountryTimeline;","import { RequestAction } from '@redux-requests/core';\r\n\r\nexport const FETCH_COUNTRY_TIMELINE = 'FETCH_COUNTRY_TIMELINE';\r\n\r\nexport const fetchCountryTimeline = (countryCode: string): RequestAction => ({\r\n  type: FETCH_COUNTRY_TIMELINE,\r\n  request: {\r\n    url: `https://api.thevirustracker.com/free-api?countryTimeline=${countryCode}`\r\n  },\r\n  meta: {\r\n    cache: 120, // Cache for two minutes.\r\n  }\r\n});","import React, { useMemo } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Box, Container, Grid, Paper, Typography } from '@material-ui/core';\r\nimport { Bar, LinearComponentProps } from 'react-chartjs-2';\r\nimport useCountryTimeline from '../useCountryTimeline';\r\nimport useCountriesStatistics from '../useCountriesStatistics';\r\nimport { colors } from '../colors';\r\nimport TitledCounter from '../vComponents/TitledCounter';\r\n\r\ninterface ISeparatedEntries {\r\n  dates: string[],\r\n  totalCasesPerDay: number[],\r\n  newCasesPerDay: number[],\r\n  totalDeathsPerDay: number[],\r\n  newDeathsPerDay: number[],\r\n  totalRecoveriesPerDay: number[]\r\n}\r\n\r\nconst CountryData: React.FC = () => {\r\n  const { code } = useParams();\r\n\r\n  \r\n  \r\n  const countryTimeline = useCountryTimeline(code);\r\n  const countryStatistics = useCountriesStatistics(code);\r\n  \r\n\r\n  // check whether the data has arrived if it hasn't let \"timeline\" = undefined\r\n  const { timeline } = countryTimeline.data ?? {};\r\n\r\n  // do the same thing but with the statistics\r\n  const {\r\n    title = '',\r\n    cases: totalCases = 0,\r\n    deaths: totalDeaths = 0,\r\n    recovered: totalRecovered = 0,\r\n  } = countryStatistics.data ?? {};\r\n  \r\n  const separatedEntries: ISeparatedEntries = useMemo(() => {\r\n    const tempObj: ISeparatedEntries = {\r\n      dates:                 [],\r\n      totalCasesPerDay:      [],\r\n      newCasesPerDay:        [],\r\n      totalDeathsPerDay:     [],\r\n      newDeathsPerDay:       [],\r\n      totalRecoveriesPerDay: []\r\n    };\r\n\r\n    if (timeline) {\r\n      Object.entries(timeline)\r\n        .forEach(([date,\r\n          {\r\n            deaths,\r\n            cases,\r\n            casesToday,\r\n            deathsToday,\r\n            recoveries\r\n          }], index) => {\r\n          tempObj.dates[index] = date;\r\n          tempObj.totalCasesPerDay[index] = cases;\r\n          tempObj.newCasesPerDay[index] = casesToday;\r\n          tempObj.totalDeathsPerDay[index] = deaths;\r\n          tempObj.newDeathsPerDay[index] = deathsToday;\r\n          tempObj.totalRecoveriesPerDay[index] = recoveries;\r\n        });\r\n    }\r\n\r\n    return tempObj;\r\n  },\r\n  [timeline]);\r\n  \r\n  return (\r\n    <Container maxWidth='lg'>\r\n      <Typography align='center' variant='h2' component='h1'>\r\n        {title} Covid-19 statistics\r\n      </Typography>\r\n      <Grid container justify='center'>\r\n        <Grid xs={12} item>\r\n          <TitledCounter color={colors.Cases} value={totalCases} title='Total Cases' />\r\n        </Grid>\r\n        <Grid xs={12} item>\r\n          <TitledCounter color={colors.Deaths} value={totalDeaths} title='Deaths' />\r\n        </Grid>\r\n        <Grid xs={12} item>\r\n          <TitledCounter color={colors.Recovered} value={totalRecovered} title='Recovered' />\r\n        </Grid>\r\n      </Grid>\r\n      <Paper>\r\n        <PreconfiguredTitledGraph\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: 'Total Deaths',\r\n                data: separatedEntries.totalDeathsPerDay,\r\n                backgroundColor: `${colors.Deaths}CC`,\r\n                hoverBackgroundColor: colors.Deaths,\r\n              },\r\n              {\r\n                label: 'Total Cases',\r\n                data: separatedEntries.totalCasesPerDay,\r\n                backgroundColor: `${colors.Cases}CC`,\r\n                hoverBackgroundColor: colors.Cases,\r\n              }\r\n            ],\r\n            labels: separatedEntries.dates\r\n          }}\r\n          title='Total cases to death ratio.'\r\n        />\r\n        <PreconfiguredTitledGraph \r\n          title='New Cases Per Day' \r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: 'Daily Cases',\r\n                data: separatedEntries.newCasesPerDay,\r\n                backgroundColor: '#000000CC',\r\n                hoverBackgroundColor: colors.Cases\r\n              },\r\n            ],\r\n            labels: separatedEntries.dates\r\n          }}\r\n        />\r\n        <PreconfiguredTitledGraph\r\n          title='New Deaths Per Day'\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: 'Daily Deaths',\r\n                data: separatedEntries.newDeathsPerDay,\r\n                backgroundColor: '#000000CC',\r\n                hoverBackgroundColor: colors.Deaths,\r\n              },\r\n            ],\r\n            labels: separatedEntries.dates\r\n          }}\r\n        />\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nfunction formatZeroesToKorM(value: number) {\r\n  if (value < 1000) return value;\r\n  return (value < 1000000) ? `${value/1000}K` : `${value/1000000}M`;\r\n}\r\n\r\ntype PreconfiguredGraphProps = \r\n  LinearComponentProps & {\r\n    title: string\r\n  };\r\n\r\nfunction PreconfiguredTitledGraph({ data, title }: PreconfiguredGraphProps) {\r\n  return (\r\n    <>\r\n      <Box marginLeft={10} marginTop={20}>\r\n        <Typography variant='h2'>\r\n          {title}\r\n        </Typography>\r\n      </Box>\r\n      <Bar\r\n        data={data}\r\n        options={{\r\n          tooltips: {\r\n            mode: 'index',\r\n            intersect: 'false'\r\n          },\r\n          scales: {\r\n            xAxes: [{\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n              },\r\n              stacked: true,\r\n              ticks: {\r\n                maxTicksLimit: 10\r\n              }\r\n            }],\r\n            yAxes: [{\r\n              ticks: {\r\n                min: 0,\r\n                maxTicksLimit: 7,\r\n                stepSize: 2.5,\r\n                callback: formatZeroesToKorM\r\n              }\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\nexport default CountryData;","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport theme from './theme';\r\nimport Global from './Components/Global';\r\nimport CountriesStatistics from './Components/CountriesStatistics';\r\nimport CountryData from './Components/CountryData';\r\n\r\nconst useStyles = makeStyles({\r\n  main: {\r\n    overflowX: 'hidden',\r\n  },\r\n  countriesStatistics: {\r\n    marginTop: '4rem'\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  const { main: mainClassname, countriesStatistics } = useStyles();\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <main className={mainClassname}>\r\n        <Router>\r\n          <Switch>\r\n            <Route path='/' exact>\r\n              <Global />\r\n              <CountriesStatistics className={countriesStatistics} />\r\n            </Route>\r\n            <Route path='/country/:code'>\r\n              <CountryData />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </main>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { HandleRequestConfig, handleRequests } from '@redux-requests/core';\r\nimport { createDriver } from '@redux-requests/axios';\r\nimport axios from 'axios';\r\n\r\ninterface IRequestAction {\r\n  request: {\r\n    url: string\r\n  }\r\n}\r\n\r\n// handle current API warnings. They're sent as html in the response body along with the JSON\r\nconst onSuccess: HandleRequestConfig['onSuccess'] = (response: {data: unknown}, RequestAction) => {\r\n  const { request: { url } } = RequestAction as IRequestAction;\r\n  const urlObj = new URL(url);\r\n  // console.log(response);\r\n\r\n  if (urlObj.host === 'api.thevirustracker.com') {\r\n    const { data } = response;\r\n    // if data is a string that most likely means that there is HTML in the response body and it couldn't be parsed properly\r\n    // so just remove the html and reParse the JSON and hopefully the html isn't too complex for the Regex to work.\r\n    if (typeof data === 'string') {\r\n      const strippedStr = (data as string).replace(\r\n        /<.+/ig,\r\n        ''\r\n      );\r\n      console.warn('The API is throwing weird warnings again... Spam @thevirustracker\\'s twitter to fix it. (P.S. They will know what you\\'re talking about)');\r\n      return {\r\n        ...response,\r\n        data: JSON.parse(strippedStr)\r\n      };\r\n    }\r\n  }\r\n  return response;\r\n};\r\n\r\n\r\nconst configureStore = () => {\r\n  const { requestsReducer, requestsMiddleware } = handleRequests({\r\n    driver: createDriver(axios),\r\n    onSuccess\r\n  });\r\n\r\n  const reducers = combineReducers({\r\n    requests: requestsReducer\r\n  });\r\n\r\n  return createStore(\r\n    reducers,\r\n    applyMiddleware(...requestsMiddleware)\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default configureStore();\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './State/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <>\n      <App />\n    </>\n  </Provider>,\n  document.getElementById('root')\n    \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}